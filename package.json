{
  "name": "modbus-stack",
  "description": "A `StreamStack` implementation of the MODBUS protocol.",
  "version": "0.2.1",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net"
  },
  "keywords": [
    "MODBUS",
    "protocol",
    "StreamStack"
  ],
  "dependencies": {
    "stream-stack": ">= 1.0.1",
    "bufferlist": ">= 0.0.6",
    "put": "*"
  },
  "devDependencies": {
    "colors": ">= 0.3.0",
    "expresso": "*"
  },
  "main": "./modbus-stack",
  "scripts": {
    "test": "expresso test/test*.js",
    "start": "node server.js"
  },
  "engines": {
    "node": ">= 0.3.0"
  },
  "directories": {},
  "files": [],
  "readme": "node-modbus-stack\n=================\n### A [StreamStack][] implementation of the [MODBUS][Modbus] protocol for [Node][].\n\nThis module exposes two concrete `StreamStack` implementations:\n`ModbusRequestStack` can be used as a MODBUS client (i.e. Master), and can write\nMODBUS compliant requests and listen for the response.\n`ModbusResponseStack` can be used to create a MODBUS server (i.e. Slave), by\nlistening for requests and providing a convenient API to respond with.\n\n[MODBUS][ModbusWiki] is an open building automation protocol that is widely used\nin various monitoring and controlling equipment. It's used with a variety of\ndifferent transports, including TCP.\n\nCurrently only communication through the TCP protocol is supported, however\nRS-485 serial support should be possible with [node-serialport]. I haven't\nhad a chance to look into it yet.\n\n\nA MODBUS Master (Client)\n------------------------\n\nYou will need to know which _Function Code_ (defined in the MODBUS specification)\nyou are invoking on the remote MODBUS slave. In this example, we'll request to\nread from the current values of the first 50 __Input Registers__ on the slave:\n\n    // 'RIR' contains the \"Function Code\" that we are going to invoke on the remote device\n    var RIR = require('modbus-stack').FUNCTION_CODES.READ_INPUT_REGISTERS;\n    \n    // IP and port of the MODBUS slave, default port is 502\n    var client = require('modbus-stack/client').createClient(502, '10.0.1.50');\n    \n    // 'req' is an instance of the low-level `ModbusRequestStack` class\n    var req = client.request(RIR, // Function Code: 4\n                             0,    // Start at address 0\n                             50);  // Read 50 contiguous registers from 0\n    \n    // 'response' is emitted after the entire contents of the response has been received.\n    req.on('response', function(registers) {\n      // An Array of length 50 filled with Numbers of the current registers.\n      console.log(registers);\n      client.end();\n    });\n\n\nA MODBUS Slave (Server)\n-----------------------\n\n`node-modbus-stack` makes it dead simple to create a compliant MODBUS Slave (or Server)\nwritten in pure JavaScript. Here's an example of a server that would respond to the\nrequest above:\n\n    var FC = require('modbus-stack').FUNCTION_CODES;\n    \n    // 'handlers' is an Object with keys containing the \"Function Codes\" that your MODBUS\n    // server will handle. Anything function code requested without a handler defined here\n    // will have the Server transparently respond with Exception Code 1 (\"Illegal Function\")\n    var handlers = {};\n    \n    // Define a handler for \"Read Input Registers\". We'll just respond with the register\n    // number requested. In a real-world situation, you'd probably look up these values from\n    // a database, etc.\n    handlers[FC.READ_INPUT_REGISTERS] = function(request, response) {\n      var start = request.startAddress;\n      var length = request.quantity;\n      \n      var resp = new Array(length);\n      for (var i=0; i<length; i++) {\n        resp[i] = start + i;\n      }\n      response.writeResponse(resp);\n    }\n\n    require('modbus-stack/server').createServer(handlers).listen(502);\n\nA \"catch-all\" function can be passed to `createServer()` instead of a \"handlers\" object, if you'd\nrather have a single callback invoked for _all_ MODBUS requests. Just be sure to call\n`writeException()` manually for any \"Function Codes\" your server isn't going to handle.\n\n\n[StreamStack]: http://github.com/TooTallNate/node-stream-stack\n[node-serialport]: https://github.com/voodootikigod/node-serialport\n[ModbusWiki]: http://en.wikipedia.org/wiki/Modbus\n[Modbus]: http://www.modbus.org\n[Node]: http://nodejs.org\n",
  "readmeFilename": "README.md",
  "_id": "modbus-stack@0.2.1",
  "dist": {
    "shasum": "83728431e6534f92d10c091d640f5a1419ab4c3c"
  },
  "_from": "modbus-stack@0.2.1",
  "_resolved": "https://registry.npmjs.org/modbus-stack/-/modbus-stack-0.2.1.tgz"
}
